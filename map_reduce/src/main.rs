#![allow(unused)]

use std::thread;



fn main() {
    let data = "
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        10864189600986950165896492368568913653
        52738049592346591005619030741397849837
        59203486159064097517324897581947328610
        21109701842816871408026310264028327883";


    let mut children = vec![];

    let chunked_data = data.split_whitespace();

    for (i, data_segment) in chunked_data.enumerate() {
        println!("data_segment {} is \"{}\"" , i , data_segment);

        children.push(thread::spawn(move || -> u32 {
            let result = data_segment
                .chars()
                // converting the text-characters to their number value ..
                .map(|c| c.to_digit(10).expect("should be a digit"))
                .sum();
        println!("processed segment {}, result={}", i , result);

        result

        }));
    }

    let final_result = children.into_iter().map(|c| c.join().unwrap()).sum::<u32>();

    println!("Final sum result: {}",final_result);


}
